def software_repo = "172.22.243.245:20202"
def repo_namespace = "cpe-tools"

def label = "weather-app-${env.BUILD_NUMBER}"
podTemplate(label: label, cloud: "fusionstage", containers: [
    containerTemplate(name: 'jnlp', image: "${software_repo}/${repo_namespace}/jenkins/jnlp-slave:3.27-1-alpine", args: '${computer.jnlpmac} ${computer.name}'),
    containerTemplate(name: 'docker', image: "${software_repo}/${repo_namespace}/docker:1.11.2", ttyEnabled: true, command: 'cat'),
    containerTemplate(name: 'maven', image: "${software_repo}/${repo_namespace}/maven:3.6.0-jdk-8-alpine", ttyEnabled: true, command: 'cat')
  ], 
  volumes: [
    hostPathVolume(mountPath: '/var/run/docker.sock', hostPath: '/var/run/docker.sock'),
    hostPathVolume(mountPath: '/opt/maven-repo', hostPath: '/opt/maven-repo')
  ],
  yaml: """
    spec:
      securityContext:
        runAsUser: 0
      nodeSelector:
        service.jenkins: jenkins-slave
  """) {

  node(label) {
    stage('CodeCheckout'){
      checkout([$class: 'GitSCM', 
          branches: [[name: "master"]], 
          doGenerateSubmoduleConfigurations: false,
          submoduleCfg: [], 
          userRemoteConfigs: [[credentialsId: 'lorainsu', url: 'https://github.com/lorainsu/weather-app.git']]])
      sh 'rm -rf /opt/maven-repo/*'
      sh 'unzip build/lib/maven-repo.zip -d /opt/maven-repo'
    }
    stage('Junit') {
      container('maven') {
        dir(env.WORKSPACE){
          sh 'mvn clean test -s build/settings.xml'
        }
      }
    }
   
    stage('CodeAnalysis') {
      container('maven') {
        dir(env.WORKSPACE){
          withSonarQubeEnv('sonarqube') {
            sh "mvn sonar:sonar -Dsonar.projectName=weather-app  -Dsonar.projectKey=weather-app -s build/settings.xml"
          }
          timeout(time: 10, unit: 'MINUTES') {
            def qg = waitForQualityGate()
            if (qg.status != 'OK') {
              error "Pipeline aborted due to quality gate failure: ${qg.status}"
            }
          }
        }
      }
    }
    stage('Compile') {
      container('maven') {
        dir(env.WORKSPACE) {
          sh "mvn clean package -Dmaven.test.skip=true -s build/settings.xml"
        }
      }
      container('docker') {
        dir(env.WORKSPACE){
          sh "mkdir -p tmp"
          sh "cp target/weather-app-0.0.1-SNAPSHOT.jar tmp/sample.jar && cp build/Dockerfile tmp/"
          sh "docker build -t weather-app:${env.BUILD_NUMBER} tmp/"
          sh "docker tag weather-app:${env.BUILD_NUMBER} weather-app:latest"
          sh "docker save weather-app:${env.BUILD_NUMBER} > weather.tar"
          uploadImage(imageAddr: "${env.WORKSPACE}/weather.tar", loginType: 'CURRENT', namespace: "${repo_namespace}")
          sh "docker save weather-app:latest > weather-latest.tar"
          uploadImage(imageAddr: "${env.WORKSPACE}/weather-latest.tar", loginType: 'CURRENT', namespace: "${repo_namespace}")
        }
      }
    }
  }
}

