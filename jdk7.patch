diff --git a/pom.xml b/pom.xml
index f412c52..3ae5dc9 100644
--- a/pom.xml
+++ b/pom.xml
@@ -19,7 +19,7 @@
 
 	<properties>
 		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-		<java.version>1.8</java.version>
+		<java.version>1.7</java.version>
 	</properties>
 
 	<dependencies>
diff --git a/src/main/java/com/example/weather/integration/ows/Weather.java b/src/main/java/com/example/weather/integration/ows/Weather.java
index 8cd1bf3..92e3816 100644
--- a/src/main/java/com/example/weather/integration/ows/Weather.java
+++ b/src/main/java/com/example/weather/integration/ows/Weather.java
@@ -2,6 +2,8 @@ package com.example.weather.integration.ows;
 
 public class Weather extends WeatherEntry {
 
+	private static final long serialVersionUID = 3736859188553769555L;
+
 	private String name;
 
 	public String getName() {
diff --git a/src/main/java/com/example/weather/integration/ows/WeatherEntry.java b/src/main/java/com/example/weather/integration/ows/WeatherEntry.java
index c5020c7..f9ac9e1 100644
--- a/src/main/java/com/example/weather/integration/ows/WeatherEntry.java
+++ b/src/main/java/com/example/weather/integration/ows/WeatherEntry.java
@@ -1,7 +1,7 @@
 package com.example.weather.integration.ows;
 
 import java.io.Serializable;
-import java.time.Instant;
+import java.util.Date;
 import java.util.List;
 import java.util.Map;
 
@@ -10,7 +10,9 @@ import com.fasterxml.jackson.annotation.JsonSetter;
 
 public class WeatherEntry implements Serializable {
 
-	private Instant timestamp;
+	private static final long serialVersionUID = -2812136805013178938L;
+
+	private Date date;
 
 	private double temperature;
 
@@ -18,14 +20,14 @@ public class WeatherEntry implements Serializable {
 
 	private String weatherIcon;
 
-	@JsonProperty("timestamp")
-	public Instant getTimestamp() {
-		return this.timestamp;
+	@JsonProperty("date")
+	public Date getDate() {
+		return this.date;
 	}
 
 	@JsonSetter("dt")
-	public void setTimestamp(long unixTime) {
-		this.timestamp = Instant.ofEpochMilli(unixTime * 1000);
+	public void setDate(long unixTime) {
+		this.date = new Date(unixTime);
 	}
 
 	/**
diff --git a/src/test/java/com/example/weather/web/WeatherApiControllerTest.java b/src/test/java/com/example/weather/web/WeatherApiControllerTest.java
index 3c53195..17ec110 100644
--- a/src/test/java/com/example/weather/web/WeatherApiControllerTest.java
+++ b/src/test/java/com/example/weather/web/WeatherApiControllerTest.java
@@ -1,7 +1,5 @@
 package com.example.weather.web;
 
-import java.time.Instant;
-
 import com.example.weather.integration.ows.Weather;
 import com.example.weather.integration.ows.WeatherEntry;
 import com.example.weather.integration.ows.WeatherService;
@@ -35,30 +33,22 @@ public class WeatherApiControllerTest {
 	public void weather() throws Exception {
 		Weather weather = new Weather();
 		weather.setName("London");
-		setWeatherEntry(weather, 286.72, 800, "01d", Instant.ofEpochSecond(1553675407));
+		setWeatherEntry(weather, 286.72, 800, "01d", 1553675407L);
 		given(this.weatherService.getWeather("uk", "london")).willReturn(weather);
 		this.mvc.perform(get("/api/weather/now/uk/london"))
-				.andExpect(status().isOk())
-				.andExpect(jsonPath("$.name", is("London")))
-				.andExpect(jsonPath("$.temperature", is(286.72)))
-				.andExpect(jsonPath("$.weatherId", is(800)))
-				.andExpect(jsonPath("$.weatherIcon", is("01d")));
+			.andExpect(status().isOk())
+			.andExpect(jsonPath("$.name", is("London")))
+			.andExpect(jsonPath("$.temperature", is(286.72)))
+			.andExpect(jsonPath("$.weatherId", is(800)))
+			.andExpect(jsonPath("$.weatherIcon", is("01d")));
 		verify(this.weatherService).getWeather("uk", "london");
 	}
 
-	private static WeatherEntry createWeatherEntry(double temperature, int id, String icon,
-			Instant timestamp) {
-		WeatherEntry entry = new WeatherEntry();
-		setWeatherEntry(entry, temperature, id, icon, timestamp);
-		return entry;
-	}
-
-	private static void setWeatherEntry(WeatherEntry entry, double temperature, int id, String icon,
-			Instant timestamp) {
+	private static void setWeatherEntry(WeatherEntry entry, double temperature, int id, String icon, long timestamp) {
 		entry.setTemperature(temperature);
 		entry.setWeatherId(id);
 		entry.setWeatherIcon(icon);
-		entry.setTimestamp(timestamp.getEpochSecond());
+		entry.setDate(timestamp);
 	}
 
 }

